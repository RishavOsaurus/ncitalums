---
import { loadConfig } from '../../utils/loadconfig';

const config = loadConfig();
const menu = config.menu;
---

<nav class="flex flex-col md:flex-row bg-gray-800 text-white p-4 w-full fixed z-10">
  <div class="flex items-center justify-between md:w-1/3">
    <div class="text-lg font-bold">{menu.title}</div>
    <button id="menuToggle" aria-expanded="false" class="md:hidden">
      <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16m-7 6h7"></path>
      </svg>
    </button>
  </div>

  <ul id="navLinks" class="flex flex-col md:flex-row md:justify-center md:items-center md:flex-1 md:space-x-6 mt-2 md:mt-0">
    {menu.main.map(item => (
      <li class="relative">
        {item.subMenu ? (
          <>
            <button id="directoryToggle" class="hover:text-gray-300 focus:outline-none">{item.title}</button>
            <div id="megaMenu" class="absolute left-0 hidden bg-white text-black p-4 shadow-lg mt-2 rounded-md z-20">
              <div class="flex flex-col">
                {item.subMenu.map(subItem => (
                  <div>
                    {subItem.category ? (
                      <>
                        <h3 class="font-bold mb-2">{subItem.category}</h3>
                        {subItem.inRange ? (
                          <nav class="w-64">
                            <ul class="grid grid-cols-2 gap-2">
                              {Array.from({ length: (subItem.rangeEnd ?? new Date().getFullYear()) - subItem.rangeStart! + 1 }, (_, i) => subItem.rangeStart! + i).map(range => (
                                <li>
                                  <a href={subItem.link.replace('{range}', `${range}`)} class="text-gray-700 hover:text-blue-600">{range}</a>
                                </li>
                              ))}
                            </ul>
                          </nav>
                        ) : (
                          <ul>
                            {subItem.items && subItem.items.map(department => (
                              <li>
                                <a href={subItem.link.replace('{item}', department)} class="text-gray-700 hover:text-blue-600">{department}</a>
                              </li>
                            ))}
                          </ul>
                        )}
                      </>
                    ) : (
                      <ul>
                        {subItem.items && subItem.items.map(department => (
                          <li>
                            <a href={subItem.link.replace('{item}', department)} class="text-gray-700 hover:text-blue-600">{department}</a>
                          </li>
                        ))}
                      </ul>
                    )}
                  </div>
                ))}
              </div>
            </div>
          </>
        ) : (
          <a href={item.link} class="hover:text-gray-300">{item.title}</a>
        )}
      </li>
    ))}
  </ul>

  <div class="flex items-center mt-2 md:mt-0 md:ml-auto">
    <div class="relative flex-1">
      <input type="text" placeholder="Search..."class="border rounded-md p-2 w-full focus:outline-none focus:ring focus:border-blue-300" />
      <button class="absolute right-0 top-0 mt-2 mr-2">
        <svg class="w-5 h-5 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h-1l-4-4H7a5 5 0 100 10h10a5 5 0 000-10H15l4 4"></path>
        </svg>
      </button>
    </div>
    <button class="ml-4 bg-gray-700 hover:bg-gray-600 text-white px-4 py-2 rounded-md">Sign In</button>
  </div>
</nav>

<script>
  const menuToggle = document.getElementById('menuToggle')!;
  const navLinks = document.getElementById('navLinks')!;
  const directoryToggle = document.getElementById('directoryToggle')!;
  const megaMenu = document.getElementById('megaMenu')!;

  menuToggle.addEventListener('click', () => {
    navLinks.classList.toggle('hidden');
    const isExpanded = navLinks.classList.contains('hidden') ? 'false' : 'true';
    menuToggle.setAttribute('aria-expanded', isExpanded);
  });

  directoryToggle.addEventListener('click', () => {
    megaMenu.classList.toggle('hidden');
  });
</script>
